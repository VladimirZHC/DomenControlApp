openapi: "3.0.0"
info:
  title: "GroupPolicyConstructor API"
  version: "0.1"
  description: 'Test API'
  contact:
    name: "GroupPolicyConstructor API"
    url: "http://localhost:8000/"
    email: "Sluhaivova@gmail.com"
  license:
    name: "CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)"
    url: "https://github.com/VladimirZHC"
    
servers:
- url: "http://localhost:8000"
  description: "API сервер"

paths:
  /divisions:
    get:
      tags:
        - Division
      summary: "Вызов текущего списка подразделений"
  
      description: "Получить текущий список подразделений"
      
      operationId: "DivisionListData"
      
      parameters:
        - $ref: '#/components/parameters/FiltersQueryParam'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Division'
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
    
  /division:
    post:
      tags:
        - Division
      summary: "Создание данных подразделения"
      
      description: Создает подразделение в базе данных

      operationId: "DivisionData"
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Division'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
                    
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Поля, заполняемые при создании подразделения'
                  properties:
                    name:
                      type: string
                    parent:
                      $ref: '#/components/schemas/DivisionParent'
                    group_policies:
                      type: array
                      items:
                          $ref: '#/components/schemas/GroupPolicy'
                
      
 
  /division/{id}:
    get:
      tags:
        - Division
        
        
      summary: Получить данные о подразделении по идентификатору
        
      description: Получить информацию о конкретном подразделении

      operationId: "DivisionID"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор подразделения
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Division'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
                
    put:
      tags:
        - Division
        
      summary: "Обновление данных подразделения"
      
      description: "Обновляет данные подразделения в базу данных"
      
      operationId: "DivisionPUT"

      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор подразделения
          schema:
            type: integer
            example: 1
            
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Division'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Обновляемые поля'
                  properties:
                    name:
                      type: string
                    parent:
                      $ref: '#/components/schemas/DivisionParent'
                    group_policies:
                      type: array
                      items:
                        $ref: '#/components/schemas/GroupPolicy'
            
                
    delete:
      tags:
        - Division
        
      summary: "Удалить данные подразделения"
        
      description: Удалить подразделение по идентификатору

      operationId: "DivisionDelete"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        
        '500':
          $ref: '#/components/responses/ErrorResponse'
      
  /grouppolicies:
    get:
      tags:
        - GroupPolicy
      summary: "Вызов текущего списка групповых политик"
  
      description: "Получить текущий список групповых политик"
      
      operationId: "GroupPolicyListData"
      
      parameters:
        - $ref: '#/components/parameters/FiltersQueryParam'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupPolicy'
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /grouppolicy:
    post:
      tags:
        - GroupPolicy
      summary: "Создание групповой политки"
      
      description: Создает групповую политику в базе данных

      operationId: "GroupPolicyPost"
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicy'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
                    
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Поля, заполняемые при создании групповой политики'
                  properties:
                    name:
                      type: string
                    body:
                      type: string
      
    
          
  /grouppolicy/{id}:
    get:
      tags:
        - GroupPolicy
        
      summary: Получить данные о групповой политике по идентификатору
        
      description: Получить информацию о конкретной политике

      operationId: "GroupPolicyID"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор подразделения
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicy'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
                
    put:
      tags:
        - GroupPolicy
        
      summary: "Обновление данных групповой политики"
      
      description: "Обновляет данные групповой политики в базу данных"

      operationId: "GroupPolicyPut"
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
            
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicy'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Обновляемые поля'
                  properties:
                    name:
                      type: string
                    body:
                      type: string
            
                
    delete:
      tags:
        - GroupPolicy
        
      summary: "Удалить данные групповой политики"
        
      description: Удалить групповую политику по идентификатору

      operationId: "GroupPolicyDelete"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        
        '500':
          $ref: '#/components/responses/ErrorResponse'
                
  /users:
    get:
      tags:
        - DomainUser
      summary: "Вызов текущего списка пользователей"
  
      description: "Получить список пользователей"
      
      operationId: "UserListData"
      
      parameters:
        - $ref: '#/components/parameters/FiltersQueryParam'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainUser'
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /user:
    post:
      tags:
        - DomainUser
        
      summary: "Создание пользователя"
      
      description: Создать пользователя 

      operationId: "UserPost"
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DomainUser'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
                    
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Поля, заполняемые при создании подразделения'
                  properties:
                    name:
                      type: string
                      example: "Владимир"
                    division:
                      $ref: '#/components/schemas/Division'

  /users/{id}:
    get:
      tags:
        - DomainUser
        
      summary: Получить данные о пользователе по идентификатору
        
      description: Получить информацию о конкретном пользователе

      operationId: "UserID"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DomainUser'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
  
    put:
      tags:
        - DomainUser
        
      summary: "Обновление данных пользователя"
      
      description: "Обновляет данные пользователя в базу данных"

      operationId: "UserPut"
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор пользоваеля
          schema:
            type: integer
            example: 1
            
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DomainUser'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Обновляемые поля'
                  properties:
                    name:
                      type: string
                    division:
                      $ref: '#/components/schemas/Division'
    
    delete:
      tags:
        - DomainUser
        
      summary: "Удалить данные пользователя"
        
      description: Удалить пользователя по идентификатору

      operationId: "UserDelete"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        
        '500':
          $ref: '#/components/responses/ErrorResponse'

  /users/{id}/policy:
    get:
      tags:
        - DomainUser
        
      summary: "Получить результатирующую политику для пользователя"
        
      description: Получить результатирую политику

      operationId: "DomainUserID"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор пользователя 
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPolicy'
                
        '500':
          $ref: '#/components/responses/ErrorResponse'
  
  /computers:
    get:
      tags:
        - Computer
      summary: "Вызов текущего списка компьютеров"
  
      description: "Получить список компьютеров"
      
      operationId: "GroupPolicyList"
      
      parameters:
        - $ref: '#/components/parameters/FiltersQueryParam'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Computer'
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /computer:
    post:
      tags:
        - Computer
        
      summary: "Создание компьютера"
      
      description: Создать компьютер
      
      operationId: "ComputerPost"
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Поля, заполняемые при создании подразделения'
                  properties:
                    name:
                      type: string
                      example: 'PC1'
                    division:
                      $ref: '#/components/schemas/Division'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Computer'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
    
          
          
  /computers/{id}:
    get:
      tags:
        - Computer
        
      summary: Получить данные о компьютере по идентификатору
        
      description: Получить информацию о конкретном компьюетере

      operationId: "ComputerID"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор компьютера
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Computer'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
                
                
    put:
      tags:
        - Computer
        
      summary: "Обновление данных компьютера"
      
      description: "Обновляет данные компьютера в базу данных"
      
      operationId: "ComputerPut"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
            
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Computer'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Обновляемые поля'
                  properties:
                    name:
                      type: string
                    body:
                      type: string
                
                
    delete:
      tags:
        - Computer
        
      summary: "Удалить данные компьютера"
        
      description: Удалить компьютер по идентификатору

      operationId: "ComputerDelete"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        
        '500':
          $ref: '#/components/responses/ErrorResponse'

  /computers/{id}/policy:
    get:
      tags:
        - Computer
        
      summary: "Получить результатирующую политику для компьютера"
        
      description: Получить результатирую политику

      operationId: "GroupPolicyIDResult"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор компьютера 
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultPolicy'
                
        '500':
          $ref: '#/components/responses/ErrorResponse'
  
  /schemas:
    get:
      tags:
        - SchemaParam
      summary: "Вызов текущего списка параметров"
  
      description: "Получить список параметров"
      
      operationId: "SchemaParamsListData"
      
      parameters:
        - $ref: '#/components/parameters/FiltersQueryParam'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SchemaParam'
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /schema/{id}:
    get:
      tags:
        - SchemaParam
        
      summary: Получить данные о схеме параметров по идентификатору

      operationId: "Schema"
        
      description: Получить информацию о конкретной схеме параметров
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/SchemaParam'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
    
    put:
      tags:
        - SchemaParam
        
      summary: "Обновление данных схемы параметров"
      
      description: "Обновляет данные схемы параметров в базу данных"
      
      operationId: "SchemaPut"
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
            
            
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Обновляемые поля'
                  properties:
                    body:
                      type: string
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SchemaParam'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        '500':
          $ref: '#/components/responses/ErrorResponse'
          
          


components:
  schemas:
    Division:
      description: Модель, в которой хранится информация о подразделении
      type: object
      required:
        - id
        - name
      
      properties:
        id:
          type: integer
          example: 1
                    
        name:
          type: string
          example: "Отдел контроля"
        
        parent:
          $ref: '#/components/schemas/DivisionParent'
                    
        group_policies:
          type: array
          items:
           $ref: '#/components/schemas/GroupPolicy'
          
    GroupPolicy:
      description: Модель, в которой хранится информация о групповой политики
      type: object
      required:
        - id
        - name
        - body
        
      properties:
        id:
          type: integer
          example: 1
          
        name:
          type: string
          example: "Политичная"
          
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
         
    DomainUser:
      description: Модель, в которой хранится информация о пользователе
      type: object
      required:
        - id
        - name
        
      properties:
        id:
          type: integer
          example: 1
        
        name:
          type: string
          example: "Владимир"
          
        division:
          $ref: '#/components/schemas/Division'
          
    
    Computer:
      description: Модель, в которой хранится информация о компьютере
      type: object
      required:
        - id
        - name
      
      properties:
        id:
          type: integer
          example: 1
        
        name:
          type: string
          example: "PC1"
          
        division:
          $ref: '#/components/schemas/Division'
          
    SchemaParam:
      description: Модель, в которой хранится информация о схемах параметров
      type: object
      required:
        - type
        - body
      properties:
        type:
          type: string
          example: 'USER'
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
    ResultPolicy:
      description: Модель, в которой хранится информация о результатирующих политииках
      type: object
      required:
        - body
      properties:
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
          
    DivisionParent:
      description: Model containing info about parent
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Отдел контроля"
  
  responses:
    ErrorResponse:
      description: Стандартное сообщение об ошибке
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Сообщение об ошибке
              success:
                type: boolean
                description: Результат выполнения операции
            required:
              - error
              - success
          examples:
            example-1:
              value:
                error: string
                success: false
                
  parameters:
    FiltersQueryParam:
      name: filters
      in: query
      required: false
      schema:
        type: string
      description: 'Правила фильтрации, применяемые к массиву записей, пример: http://127.0.0.1:8000/divisions/?group_policy=5 вернет список подразделений с одинаковой групповой политикой, http://127.0.0.1:8000/divisions/?name=Отдел+безопасности вернет список подразделений с названием <Отдел безопасности> '
      
      
    OrderByQueryParam:
      name: orderby
      in: query
      required: false
      schema:
        type: string
      description: 'Правила сортировки для возвращаемого массива данных, пример: http://127.0.0.1:8000/divisions/?ordering=-departament/departament вернет отсортированный массив по подразделению в обычном или обратном порядке'
                
            
    Page:
      name: page
      in: query
      required: false
      schema:
        type: integer
      description: 'Реализация пагинации, пример: http://127.0.0.1:8000/divisions/?page=2 отобразит вторую страницу'
      
      
    SearchQueryParam:
      name: search
      in: query
      required: false
      schema:
        type: string
      description: 'Правила поиска, применяемые к массиву записей, пример: http://127.0.0.1:8000/divisions/?search=Отдел + продаж  Найдёт запись с апрашиваемым именем подразделения'
          
          
          