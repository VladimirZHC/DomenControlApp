openapi: "3.0.0"
info:
  title: "GroupPolicyConstructor API"
  description: "Group policy constructor application for simulating a domain controller Data is available in JSON, XML, or HTML format. **Note**: This sample Swagger file covers the `current` endpoint only from the GroupPolicyConstructor API. <br/><br/>"
  version: "0.1"
  contact:
    name: "GroupPolicyConstructor API"
    url: http://localhost:8000/
    email: "Sluhaivova@gmail.com"
  license:
    name: "CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)"
    url: https://github.com/VladimirZHC
    
servers:
- url: "http://localhost:8000/"
  description: "API root"

paths:
  /division:
    get:
      tags:
        - Divisions
      summary: "Call current divison list for one location."
  
      description: "Get current Division list"
      
      operationId: "DivisionListData"
      
      responses:
        200:
          description: Successful pull of division info
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Division'
            application/xml"\:
              schema:
                type: object
                $ref: '#/components/schemas/Division'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: DivisionList not found
                type: string
                example: Not found
    
    post:
      tags:
        - Divisions
      summary: "Create division data"
      
      description: Create a new Division data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Division'
      
      responses:
        200:
          description: Successfully created a new Division
    
    
          
  /division/{id}:
    get:
      tags:
        - Divisions
        
        
      summary: "Get division data by ID"
        
      description: Obtain information about specific division
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the division
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Division'
                      
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: Division ID not found
                type: string
                example: Not found
                
    put:
      tags:
        - Divisions
        
      summary: "Update division data"
      
      description: "Put Division data in the Database"
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the division
          schema:
            type: integer
            example: 1
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Division'
              
      responses:
        200:
          description: Successfully delete a new Division
    
                
    delete:
      tags:
        - Divisions
        
      summary: "Delete division data"
        
      description: Delete division by id
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the division
          schema:
            type: integer
            example: 1
      
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized
      
      
  /grouppolicy:
    get:
      tags:
        - GroupPolicy
      summary: "Call current grouppolicy list for one location."
  
      description: "Get current groupPolicy list"
      
      operationId: "GroupPolicyListData"
      
      responses:
        200:
          description: Successful pull of grouppolicy info
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GroupPolicy'
            application/xml"\:
              schema:
                type: object
                $ref: '#/components/schemas/GroupPolicy'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: GroupPolicy not found
                type: string
                example: Not found
    
    post:
      tags:
        - GroupPolicy
        
      summary: "Create grouppolicy data"
      
      description: Create a new GroupPolicy data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/GroupPolicy'
      
      responses:
        200:
          description: Successfully created a new GroupPolicy
    
          
  /grouppolicy/{id}:
    get:
      tags:
        - GroupPolicy
        
      description: Obtain information about specific GroupPolicy
      
      summary: "Get grouppolicy data by ID"
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the grouppolicy
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GroupPolicy'
                      
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: Division ID not found
                type: string
                example: Not found
                
    put:
      tags:
        - GroupPolicy
        
      summary: "Update GroupPolicy data"
      
      description: Update GroupPolicy data in the Database
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the grouppolicy
          schema:
            type: integer
            example: 1
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/GroupPolicy'
              
      responses:
        200:
          description: Successfully updated a new GroupPolicy
                
                
    delete:
      tags:
        - GroupPolicy
        
      summary: "Delete GroupPolicy data"
        
      description: Delete grouppolicy by id
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the grouppolicy
          schema:
            type: integer
            example: 1
      
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized
                
  /users:
    get:
      tags:
        - DomenUser
      summary: "Call current User list for one location."
  
      description: "Get current User list"
      
      operationId: "UserListData"
      
      responses:
        200:
          description: Successful pull of users info
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DomenUser'
            application/xml"\:
              schema:
                type: object
                $ref: '#/components/schemas/DomenUser'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: UserList not found
                type: string
                example: Not found
    
    post:
      tags:
        - DomenUser
        
      summary: "Create user data"
      
      description: Create a new user data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/DomenUser'
      
      responses:
        200:
          description: Successfully created a new User
    
    
          
  /users/{id}:
    get:
      tags:
        - DomenUser
        
      summary: "Get user data by ID"
        
      description: Obtain information about specific user
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user 
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DomenUser'
                      
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: User ID not found
                type: string
                example: Not found
                
                
    put:
      tags:
        - DomenUser
        
      summary: "Update user data"
      
      description: Update User data in the Database
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user 
          schema:
            type: integer
            example: 1
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/DomenUser'
              
      responses:
        200:
          description: Successfully updated a new DomenUser
    
    delete:
      tags:
        - DomenUser 
        
      summary: "Delete user data"
        
      description: Delete user by id
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user
          schema:
            type: integer
            example: 1
      
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized
                
  
  /computers:
    get:
      tags:
        - Computers
      summary: "Call current Computer list for one location."
  
      description: "Get current Computer list"
      
      operationId: "ComputerListData"
      
      responses:
        200:
          description: Successful pull of computers info
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Computers'
            application/xml"\:
              schema:
                type: object
                $ref: '#/components/schemas/Computers'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: ComputerList not found
                type: string
                example: Not found
    
    post:
      tags:
        - Computers
        
      summary: "Create computer data"
      
      description: Create a new computer data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Computers'
      
      responses:
        200:
          description: Successfully created a new Computer
    
          
          
  /computers/{id}:
    get:
      tags:
        - Computers
      
      summary: "Get computer by ID"
      
      description: Obtain information about specific computer
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the computer 
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Computers'
                      
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: Computer ID not found
                type: string
                example: Not found
                
                
    put:
      tags:
        - Computers
        
      summary: "Update computer data"
      
      description: Update Computer data in the Database
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the computer 
          schema:
            type: integer
            example: 1
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Computers'
              
      responses:
        200:
          description: Successfully updated a new Computer
                
                
    delete:
      tags:
        - Computers
        
      summary: "Delete computer data"
        
      description: Delete computers by id
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the computer
          schema:
            type: integer
            example: 1
      
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized
                
  /schema:
    get:
      tags:
        - SchemaParams
      summary: "Call current SchemaParams list for one location."
  
      description: "Get current SchemaParams list"
      
      operationId: "SchemaParamsListData"
      
      responses:
        200:
          description: Successful pull of schemaparams info
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SchemaParams'
            application/xml"\:
              schema:
                type: object
                $ref: '#/components/schemas/SchemaParams'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: SchemaParams not found
                type: string
                example: Not found
    
    post:
      tags:
        - SchemaParams
        
      summary: "Create schemaparams data"
      
      description: Create a new schemaparams data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SchemaParams'
      
      responses:
        200:
          description: Successfully created a new SchemaParams
    
    put:
      tags:
        - SchemaParams
        
      summary: "Update SchemaParams data"
      
      description: Update SchemaParams data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SchemaParams'
              
      responses:
        200:
          description: Successfully updated a new SchemaParams

components:
  schemas:
    Division:
      description: Model containing division info
      type: object
      required:
        - id
        - name
      
      properties:
        id:
          type: integer
          example: 1
                    
        name:
          type: string
          example: "Отдел контроля"
        
        departament:
          $ref: '#/components/schemas/DivisionParent'
                    
        group_ploicy:
          type: array
          items:
           $ref: '#/components/schemas/GroupPolicy'
          
    GroupPolicy:
      description: Model containing group policy info
      type: object
      required:
        - id
        - name
        
      properties:
        id:
          type: integer
          example: 1
          
        name:
          type: string
          example: "Политичная"
          
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
         
    DomenUser:
      description: Model containing user info
      type: object
      required:
        - id
        - name
        
      properties:
        id:
          type: integer
          example: 1
        
        name:
          type: string
          example: "Владимир"
          
        division:
          $ref: '#/components/schemas/Division'
          
    
    Computers:
      description: Model containing computers info
      type: object
      required:
        - id
        - name
      
      properties:
        id:
          type: integer
          example: 1
        
        name:
          type: string
          example: "PC1"
          
        division:
          $ref: '#/components/schemas/Division'
          
    SchemaParams:
      description: Model containing type info
      type: object
      required:
        - types
      properties:
        types:
          type: string
          example: 'USER'
          
        
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
          
    DivisionParent:
      description: Model containing info about parent
      type: object
      required:
        - name
        
      properties:
        name:
          type: string
          example: "Отдел контроля"
          
        
          
        
          
        
      
      
      
      

  
        
  