openapi: "3.0.0"
info:
  title: "GroupPolicyConstructor API"
  version: "0.1"
  contact:
    name: "GroupPolicyConstructor API"
    url: http://localhost:8000/
    email: "Sluhaivova@gmail.com"
  license:
    name: "CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)"
    url: https://github.com/VladimirZHC
    
servers:
- url: "http://localhost:8000/"
  description: "API сервер"

paths:
  /division:
    get:
      tags:
        - Divisions
      summary: "Вызов текущего списка подразделений"
  
      description: "Получить текущий список подразделений"
      
      operationId: "DivisionListData"
      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/Division'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        500:
          $ref: '#/components/responses/ErrorResponse'
    
    post:
      tags:
        - Divisions
      summary: "Создание данных подразделения"
      
      description: Создает подразделение в базе данных
      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Division'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        500:
          $ref: '#/components/responses/ErrorResponse'
                    
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Поля, заполняемые при создании группы пользователей'
                  properties:
                    name:
                      type: string
                    parent:
                      $ref: '#/components/schemas/DivisionParent'
                    group_policies:
                      $ref: '#/components/schemas/GroupPolicy'
                
      
 
  /division/{id}:
    get:
      tags:
        - Divisions
        
        
      summary: Получить данные о подразделении по идентификатору
        
      description: Получить информацию о конкретном подразделении
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор подразделения
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/Division'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        500:
          $ref: '#/components/responses/ErrorResponse'
                
    put:
      tags:
        - Divisions
        
      summary: "Обновление данных подразделения"
      
      description: "Обновляет данные подразделения в базу данных"
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор подразделения
          schema:
            type: integer
            example: 1
            
            
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Division'
                
                  success:
                    type: boolean
                    description: Признак успеха операции
                    
        500:
          $ref: '#/components/responses/ErrorResponse'
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Обновляемые поля'
                  properties:
                    name:
                      type: string
                    parent:
                      $ref: '#/components/schemas/DivisionParent'
                    group_policies:
                      $ref: '#/components/schemas/GroupPolicy'
            
                
    delete:
      tags:
        - Divisions
        
      summary: "Удалить данные подразделения"
        
      description: Удалить подразделение по идентификатору
      
      parameters:
        - in: path
          name: id
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        
        500:
          $ref: '#/components/responses/ErrorResponse'
      
  /grouppolicy:
    get:
      tags:
        - GroupPolicy
      summary: "Call current grouppolicy list for one location."
  
      description: "Get current groupPolicy list"
      
      operationId: "GroupPolicyListData"
      
      responses:
        200:
          description: Successful pull of grouppolicy info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupPolicy'
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: GroupPolicy not found
                type: string
                example: Not found
    
    post:
      tags:
        - GroupPolicy
        
      summary: "Create grouppolicy data"
      
      description: Create a new GroupPolicy data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/GroupPolicy'
      
      responses:
        200:
          description: Successfully created a new GroupPolicy
    
          
  /grouppolicy/{id}:
    get:
      tags:
        - GroupPolicy
        
      description: Obtain information about specific GroupPolicy
      
      summary: "Get grouppolicy data by ID"
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the grouppolicy
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GroupPolicy'
                      
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: Division ID not found
                type: string
                example: Not found
                
    put:
      tags:
        - GroupPolicy
        
      summary: "Update GroupPolicy data"
      
      description: Update GroupPolicy data in the Database
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the grouppolicy
          schema:
            type: integer
            example: 1
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                body:
                  type: string
              
      responses:
        200:
          description: Successfully updated a new GroupPolicy
                
                
    delete:
      tags:
        - GroupPolicy
        
      summary: "Delete GroupPolicy data"
        
      description: Delete grouppolicy by id
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the grouppolicy
          schema:
            type: integer
            example: 1
      
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized
                
  /users:
    get:
      tags:
        - DomenUser
      summary: "Call current User list for one location."
  
      description: "Get current User list"
      
      operationId: "UserListData"
      
      responses:
        200:
          description: Successful pull of users info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DomenUser'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: UserList not found
                type: string
                example: Not found
    
    post:
      tags:
        - DomenUser
        
      summary: "Create user data"
      
      description: Create a new user data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/DomenUser'
      
      responses:
        200:
          description: Successfully created a new User

  /users/{id}:
    get:
      tags:
        - DomenUser
        
      summary: "Get user data by ID"
        
      description: Obtain information about specific user
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user 
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DomenUser'
                      
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: User ID not found
                type: string
                example: Not found
  
    put:
      tags:
        - DomenUser
        
      summary: "Update user data"
      
      description: Update User data in the Database
      
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user 
          schema:
            type: integer
            example: 1
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                division:
                  type: string
              
      responses:
        200:
          description: Successfully updated a new DomenUser
    
    delete:
      tags:
        - DomenUser 
        
      summary: "Delete user data"
        
      description: Delete user by id
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user
          schema:
            type: integer
            example: 1
      
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized

  /users/{id}/policy:
    get:
      tags:
        - DomenUser
        
      summary: "Get resulting policy for user"
        
      description: Obtain information about specific user
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user 
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResultPolicy'
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: User ID not found
                type: string
                example: Not found
  
  /computers:
    get:
      tags:
        - Computers
      summary: "Call current Computer list for one location."
  
      description: "Get current Computer list"
      
      operationId: "ComputerListData"
      
      responses:
        200:
          description: Successful pull of computers info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Computers'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: ComputerList not found
                type: string
                example: Not found
    
    post:
      tags:
        - Computers
        
      summary: "Create computer data"
      
      description: Create a new computer data in the Database
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Computers'
      
      responses:
        200:
          description: Successfully created a new Computer
    
          
          
  /computers/{id}:
    get:
      tags:
        - Computers
      
      summary: "Get computer by ID"
      
      description: Obtain information about specific computer
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the computer 
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Computers'
                      
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: Computer ID not found
                type: string
                example: Not found
                
                
    put:
      tags:
        - Computers
        
      summary: "Update computer data"
      
      description: Update Computer data in the Database
      
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the computer 
          schema:
            type: integer
            example: 1
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                division:
                  type: string
              
      responses:
        200:
          description: Successfully updated a new Computer
                
                
    delete:
      tags:
        - Computers
        
      summary: "Delete computer data"
        
      description: Delete computers by id
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the computer
          schema:
            type: integer
            example: 1
      
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized

  /computers/{id}/policy:
    get:
      tags:
        - Computers
      summary: "Get resulting policy for computer"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the computer 
          schema:
            type: integer
            example: 1
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResultPolicy'
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: Computer ID not found
                type: string
                example: Not found
  
  /schema:
    get:
      tags:
        - SchemaParams
      summary: "Call current SchemaParams list for one location."
  
      description: "Get current SchemaParams list"
      
      operationId: "SchemaParamsListData"
      
      responses:
        200:
          description: Successful pull of schemaparams info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaParams'
                    
        404:
          description: Not found response
          content:
            text/plain:
              schema:
                title: SchemaParams not found
                type: string
                example: Not found
  /schema/{id}:
    get:
      tags:
        - SchemaParams
        
      summary: "Retrieve a SchemaParams data"
      
      description: Create a new schemaparams data in the Database
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the schema
          schema:
            type: string
            example: USER
      
      responses:
        200:
          description: Successfully created a new SchemaParams
    
    put:
      tags:
        - SchemaParams
        
      summary: "Update SchemaParams data"
      
      description: Update SchemaParams data in the Database
      
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the schema
          schema:
            type: string
            example: USER
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
              
      responses:
        200:
          description: Successfully updated a new SchemaParams

components:
  schemas:
    Division:
      description: Model containing division info
      type: object
      required:
        - id
        - name
      
      properties:
        id:
          type: integer
          example: 1
                    
        name:
          type: string
          example: "Отдел контроля"
        
        parent:
          $ref: '#/components/schemas/DivisionParent'
                    
        group_policies:
          type: array
          items:
           $ref: '#/components/schemas/GroupPolicy'
          
    GroupPolicy:
      description: Model containing group policy info
      type: object
      required:
        - id
        - name
        - body
        
      properties:
        id:
          type: integer
          example: 1
          
        name:
          type: string
          example: "Политичная"
          
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
         
    DomenUser:
      description: Model containing user info
      type: object
      required:
        - id
        - name
        
      properties:
        id:
          type: integer
          example: 1
        
        name:
          type: string
          example: "Владимир"
          
        division:
          $ref: '#/components/schemas/Division'
          
    
    Computers:
      description: Model containing computers info
      type: object
      required:
        - id
        - name
      
      properties:
        id:
          type: integer
          example: 1
        
        name:
          type: string
          example: "PC1"
          
        division:
          $ref: '#/components/schemas/Division'
          
    SchemaParams:
      description: Model containing type info
      type: object
      required:
        - type
        - body
      properties:
        type:
          type: string
          example: 'USER'
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
    ResultPolicy:
      description: Resulting policy object
      type: object
      required:
        - body
      properties:
        body:
          type: string
          example: "{Безопасность: {kiosk: {autostart: [{app: firefox, timeout: 100}, {app: terminal, timeout: 0}], settings: {settings1: aaa, settings2: bbb}}}"
    DivisionParent:
      description: Model containing info about parent
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Отдел контроля"
  
  responses:
    ErrorResponse:
      description: Стандартное сообщение об ошибке
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Сообщение об ошибке
              success:
                type: boolean
                description: Результат выполнения операции
            required:
              - error
              - success
          examples:
            example-1:
              value:
                error: string
                success: false
                
            
          
          
          
          