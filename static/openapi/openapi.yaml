openapi: 3.0.0
info:
  title: GroupPolicyConstructor API
  version: '0.1'
  description: Test API
  contact:
    name: GroupPolicyConstructor API
    url: 'http://localhost:8000/'
    email: Sluhaivova@gmail.com
  license:
    name: CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)
    url: 'https://github.com/VladimirZHC'
servers:
  - url: 'http://localhost:8000'
    description: API сервер
paths:
  /orgunits/:
    get:
      tags:
        - OrgUnit
      summary: Получить список подразделений
      operationId: orgunitListData
      parameters:
        - $ref: '#/components/parameters/FiltersName'
        - $ref: '#/components/parameters/FiltersGroupPolicy'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrgUnit'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /orgunit/:
    post:
      tags:
        - OrgUnit
      summary: Создзать новое подразделение
      operationId: orgunitData
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/OrgUnit'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  data:
                    name: string
                    parent: 0
                    group_policies:
                      - 0
              properties:
                data:
                  type: object
                  required:
                    - name
                    - parent
                    - group_policies
                  properties:
                    name:
                      type: string
                      minLength: 1
                    parent:
                      type: integer
                    group_policies:
                      type: array
                      items:
                        type: integer
              required:
                - data
            examples: {}
    parameters: []
  '/orgunit/{orgUnitId}/':
    get:
      tags:
        - OrgUnit
      summary: Получить информацию о подразделении по идентификатору
      operationId: orgunitID
      parameters:
        - in: path
          name: orgUnitId
          required: true
          description: Идентификатор подразделения
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/OrgUnit'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - OrgUnit
      summary: Изменить информацию о подразделении по идентификатору
      description: Обновляет данные подразделения в базу данных
      operationId: orgunitPUT
      parameters:
        - in: path
          name: orgUnitId
          required: true
          description: Идентификатор подразделения
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/OrgUnit'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  data:
                    name: string
                    parent: 0
                    group_policies:
                      - 0
              properties:
                data:
                  type: object
                  required:
                    - name
                    - parent
                    - group_policies
                  properties:
                    name:
                      type: string
                      minLength: 1
                    parent:
                      type: integer
                    group_policies:
                      type: array
                      items:
                        type: integer
              required:
                - data
    delete:
      tags:
        - OrgUnit
      summary: Удалить подразделение по идентификатору
      description: Удалить подразделение по идентификатору
      operationId: orgunitDelete
      parameters:
        - in: path
          name: orgUnitId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    nullable: true
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: integer
        name: orgUnitId
        in: path
        required: true
  /grouppolicies/:
    get:
      tags:
        - GroupPolicy
      summary: Получить список групповых политик
      operationId: GroupPolicyListData
      parameters:
        - $ref: '#/components/parameters/FiltersName'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupPolicy'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /grouppolicy/:
    post:
      tags:
        - GroupPolicy
      summary: Создать групповую политику
      operationId: GroupPolicyPost
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicy'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                    body:
                      type: string
                      minLength: 1
                  required:
                    - name
                    - body
              required:
                - data
              x-examples:
                example-1:
                  data:
                    name: Чаосвой пояс - Москва
                    body: '{"user":{"system":{"datetime":{"timezone":"Europe/Moscow"}}}}'
            examples: {}
          application/xml:
            schema:
              type: object
              properties: {}
            examples:
              example-1:
                value: {}
  '/grouppolicy/{groupPolicyId}/':
    get:
      tags:
        - GroupPolicy
      summary: Получить информацию о групповой политике по идентификатору
      operationId: GroupPolicyID
      parameters:
        - in: path
          name: groupPolicyId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicy'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - GroupPolicy
      summary: Изменить данные групповой политики по идентификатору
      operationId: GroupPolicyPut
      parameters:
        - in: path
          name: groupPolicyId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicy'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: Обновляемые поля
                  properties:
                    name:
                      type: string
                    body:
                      type: string
    delete:
      tags:
        - GroupPolicy
      summary: Удалить групповую политику по идентификатору
      operationId: GroupPolicyDelete
      parameters:
        - in: path
          name: groupPolicyId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    nullable: true
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        '500':
          $ref: '#/components/responses/ErrorResponse'
  '/grouppolicy/{groupPolicyId}/history/':
    get:
      tags:
        - GroupPolicy
      summary: Получить данные об истории изменений групповой политики по идентификатору
      operationId: GroupPolicyIDHistory
      parameters:
        - in: path
          name: groupPolicyId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
        - $ref: '#/components/parameters/FiltersName'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupPolicyHistory'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: integer
        name: groupPolicyId
        in: path
        required: true
  '/grouppolicy/{groupPolicyId}/history/{historyId}/':
    get:
      tags:
        - GroupPolicy
      summary: Получить конкретную запись состояния групповой политики по идентификатору
      operationId: GroupPolicyIDHistoryRecord
      parameters:
        - in: path
          name: groupPolicyId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
        - in: path
          name: historyId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicyHistory'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: integer
        name: groupPolicyId
        in: path
        required: true
      - schema:
          type: integer
        name: historyId
        in: path
        required: true
  '/grouppolicy/{groupPolicyId}/history/{gphistoryid}/rollback/':
    parameters:
      - schema:
          type: integer
        name: groupPolicyId
        in: path
        required: true
      - schema:
          type: integer
        name: gphistoryid
        in: path
        required: true
    post:
      summary: Вернуться к конкретному состоянию групповой политики по идентификатору
      operationId: post-grouppolicy-id-history-historyid-rollback
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupPolicy'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /users/:
    get:
      tags:
        - DomainUser
      summary: Получить список пользователей
      operationId: UserListData
      parameters:
        - $ref: '#/components/parameters/FiltersName'
        - $ref: '#/components/parameters/FiltersOrgUnitID'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainUser'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /user/:
    post:
      tags:
        - DomainUser
      summary: Создать пользователя
      operationId: UserPost
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DomainUser'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Поля, заполняемые при создании подразделения'
                  properties:
                    name:
                      type: string
                      example: Владимир
                    orgunit:
                      type: integer
  '/user/{userId}/':
    get:
      tags:
        - DomainUser
      summary: Получить информацию о пользователе по идентификатору
      operationId: UserID
      parameters:
        - in: path
          name: userId
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DomainUser'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - DomainUser
      summary: Изменить информацию о пользователе по идентификатору
      operationId: UserPut
      parameters:
        - in: path
          name: userId
          required: true
          description: Идентификатор пользоваеля
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DomainUser'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: Обновляемые поля
                  properties:
                    name:
                      type: string
                    orgunit:
                      type: integer
    delete:
      tags:
        - DomainUser
      summary: Удалить пользователя  по идентификатору
      operationId: UserDelete
      parameters:
        - in: path
          name: userId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    nullable: true
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/user/{userId}/policy/':
    get:
      tags:
        - DomainUser
      summary: Получить результирующую политику для пользователя
      operationId: DomainUserID
      parameters:
        - in: path
          name: userId
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
            example: 1
        - $ref: '#/components/parameters/FiltersName'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ResultPolicy'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  /hosts/:
    get:
      tags:
        - Host
      summary: Получить список компьютеров
      operationId: GroupPolicyList
      parameters:
        - $ref: '#/components/parameters/FiltersName'
        - $ref: '#/components/parameters/FiltersOrgUnitID'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Host'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /host/:
    post:
      tags:
        - Host
      summary: Создать компьютер
      operationId: HostPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'Поля, заполняемые при создании подразделения'
                  properties:
                    name:
                      type: string
                      example: PC1
                    orgunit:
                      type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Host'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters: []
  '/host/{hostId}/':
    get:
      tags:
        - Host
      summary: Получить информацию о компьютере по идентификатору
      operationId: HostID
      parameters:
        - in: path
          name: hostId
          required: true
          description: Идентификатор компьютера
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Host'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - Host
      summary: Изменить информацию о компьютере по идентификатору
      operationId: HostPut
      parameters:
        - in: path
          name: hostId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Host'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    name:
                      type: string
                    orgunit:
                      type: integer
                  required:
                    - name
                    - orgunit
              required:
                - data
    delete:
      tags:
        - Host
      summary: Удалить компьютер по идентификатору
      operationId: HostDelete
      parameters:
        - in: path
          name: hostId
          required: true
          description: Идентификатор
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    nullable: true
                  success:
                    type: boolean
                    description: Признак успеха операции
                required:
                  - success
        '500':
          $ref: '#/components/responses/ErrorResponse'
  '/host/{hostId}/policy/':
    get:
      tags:
        - Host
      summary: Получить результирующую политику для компьютера
      operationId: GroupPolicyIDResult
      parameters:
        - in: path
          name: hostId
          required: true
          description: Идентификатор компьютера
          schema:
            type: integer
            example: 1
        - $ref: '#/components/parameters/FiltersName'
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ResultPolicy'
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: string
        name: hostId
        in: path
        required: true
  /schemas/:
    get:
      tags:
        - ParamSchema
      summary: Получить схемы данных для политик пользователей и компьютеров
      operationId: ParamSchemasListData
      parameters:
        - $ref: '#/components/parameters/FiltersSchemaType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParamSchema'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
  '/schema/{schemaId}/':
    get:
      tags:
        - ParamSchema
      summary: Получить схему параметров по идентификатору
      operationId: Schema
      parameters:
        - in: path
          name: schemaId
          required: true
          description: Идентификатор
          schema:
            type: string
            enum:
              - USER
              - HOST
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/ParamSchema'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - ParamSchema
      summary: Изменить схему параметров по идентификатору
      operationId: SchemaPut
      parameters:
        - in: path
          name: schemaId
          required: true
          description: Идентификатор
          schema:
            type: string
            enum:
              - USER
              - HOST
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: Обновляемые поля
                  properties:
                    body:
                      type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ParamSchema'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: string
          enum:
            - USER
            - HOST
        name: schemaId
        in: path
        required: true
  '/schema/{schemaId}/history/':
    get:
      tags:
        - ParamSchema
      summary: Получить данные об истории изменений схемы параметров по идентификатору
      operationId: SchemaHistory
      parameters:
        - in: path
          name: schemaId
          required: true
          description: Идентификатор
          schema:
            type: string
            enum:
              - USER
              - HOST
        - $ref: '#/components/parameters/OrderByQueryParam'
        - $ref: '#/components/parameters/SearchQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParamSchemaHistory'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: string
          enum:
            - USER
            - HOST
        name: schemaId
        in: path
        required: true
  '/schema/{schemaId}/history/{schemaHistoryId}/':
    get:
      tags:
        - ParamSchema
      summary: Получить конкретную запись об истории изменений схемы параметров по идентификатору
      operationId: SchemaHistoryID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ParamSchemaHistory'
                  success:
                    type: boolean
                    description: Признак успеха операции
        '500':
          $ref: '#/components/responses/ErrorResponse'
    parameters:
      - schema:
          type: string
          enum:
            - USER
            - HOST
        name: schemaId
        in: path
        required: true
      - schema:
          type: integer
        name: schemaHistoryId
        in: path
        required: true
  '/schema/{schemaId}/history/{schemaHistoryId}/rollback':
    parameters:
      - schema:
          type: string
          enum:
            - USER
            - HOST
        name: schemaId
        in: path
        required: true
      - schema:
          type: integer
        name: schemaHistoryId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-schema-id-history-schemahistoryid-rollback
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ParamSchema'
                  success:
                    type: boolean
tags:
  - name: OrgUnit
    description: Получить данные о подразделении
  - name: GroupPolicy
    description: Получить данные о групповой политике
  - name: DomainUser
    description: Получить данные о пользователе
  - name: Host
    description: Получить данные о компьютере
  - name: ParamSchema
    description: Получить данные о схеме параметров
components:
  schemas:
    OrgUnit:
      description: Информация о подразделении
      type: object
      x-examples: {}
      properties:
        id:
          type: integer
          example: 1
          description: |
            Идентификатор подразделения
          readOnly: true
        name:
          type: string
          example: Отдел контроля
          description: Имя подразделения
        parent:
          $ref: '#/components/schemas/OrgUnit'
        group_policies:
          type: array
          items:
            $ref: '#/components/schemas/GroupPolicy'
      required:
        - name
    GroupPolicy:
      description: Информация о групповой политике
      type: object
      title: ''
      properties:
        id:
          type: integer
          example: 1
          description: Идентификатор групповой политики
          readOnly: true
        name:
          type: string
          example: Энергосбережение
          description: Имя групповой политики
        body:
          type: string
          example: '{"user":{"hardware":{"power_mgmt":{"notifications":{"batt_full":"Please unplug"},"screen_timeout":180,"sleep_timeout":600}}}}'
          description: Тело групповой политики
      required:
        - name
        - body
    GroupPolicyHistory:
      description: Запись о состоянии групповой политики
      type: object
      title: ''
      properties:
        id:
          type: integer
          example: 1
          description: |
            Идентификатор истории групповой политики
          readOnly: true
        name:
          type: string
          example: Энергосбережение
          description: Имя групповой политики
          readOnly: true
        body:
          type: string
          example: '{"user":{"hardware":{"power_mgmt":{"notifications":{"batt_full":"Please unplug"},"screen_timeout":180,"sleep_timeout":600}}}}'
          description: Тело групповой политики
          readOnly: true
        updated:
          type: string
          format: date-time
          description: Дата изменения
          readOnly: true
        history_of:
          $ref: '#/components/schemas/GroupPolicy'
      required:
        - id
        - name
        - body
        - updated
        - history_of
    DomainUser:
      description: Информация о пользователе
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Идентификатор пользователя
          readOnly: true
        name:
          type: string
          example: Владимир
          description: Имя пользователя
        login:
          type: string
          pattern: '^[A-Za-z0-9 -_]+'
          description: Логин пользователя
          example: user1
        orgunit:
          $ref: '#/components/schemas/OrgUnit'
      required:
        - name
    Host:
      description: Информация о компьютере
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Идентификатор компьютера
          readOnly: true
        name:
          type: string
          example: PC1
          description: Имя компьютера
        orgunit:
          $ref: '#/components/schemas/OrgUnit'
      required:
        - name
    ParamSchema:
      description: 'Модель, в которой хранится информация о схемах параметров'
      type: object
      properties:
        type:
          type: string
          enum:
            - USER
            - HOST
          description: Тип схемы параметров
          readOnly: true
        body:
          type: string
          example: '{"system":{"autorun":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}]},"datetime":{"timezone":"","time_format":""},"env_vars":{"settings":{"source":""},"vars":[{"name":"","value":""}]},"mime_types":{"associations":[{"app":"","types":""}],"mailto":"","http":""}},"desktop":{"start_menu":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]},"quicklaunch":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]}},"hardware":{"power_mgmt":{"notifications":{"batt_low":"","batt_full":"","plugged_in":"","unplugged":""},"screen_timeout":600,"lock_when_screen_off":true,"sleep_timeout":1200,"script_timeout":300,"script_after_timeout":""}}}'
          description: Тело параметра
      required:
        - type
        - body
    ParamSchemaHistory:
      description: Запись о состоянии схемы параметров
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор истории схемы параметров
        type:
          type: string
          enum:
            - USER
            - HOST
          description: Тип схемы параметров
          readOnly: true
        body:
          type: string
          example: '{"system":{"autorun":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}]},"datetime":{"timezone":"","time_format":""},"env_vars":{"settings":{"source":""},"vars":[{"name":"","value":""}]},"mime_types":{"associations":[{"app":"","types":""}],"mailto":"","http":""}},"desktop":{"start_menu":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]},"quicklaunch":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]}},"hardware":{"power_mgmt":{"notifications":{"batt_low":"","batt_full":"","plugged_in":"","unplugged":""},"screen_timeout":600,"lock_when_screen_off":true,"sleep_timeout":1200,"script_timeout":300,"script_after_timeout":""}}}'
          description: Тело параметра запроса
        updated:
          type: string
          format: date-time
          description: Дата обновления
          readOnly: true
      required:
        - type
        - body
        - updated
    ResultPolicy:
      description: 'Массив политик, воздействующих на объект'
      type: array
      items:
        $ref: '#/components/schemas/GroupPolicy'
  responses:
    ErrorResponse:
      description: Стандартное сообщение об ошибке
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Сообщение об ошибке
              success:
                type: boolean
                description: Результат выполнения операции
                default: false
                readOnly: true
            required:
              - error
              - success
          examples:
            example-1:
              value:
                error: string
                success: false
  parameters:
    FiltersName:
      name: name
      in: query
      required: false
      schema:
        type: string
        example: Отдел Разработки
      description: Фильтрация по точному значению поля "name"
    FiltersGroupPolicy:
      name: group_policies
      in: query
      required: false
      schema:
        type: string
        example: Энергосбережение
      description: Фильтрация по точному значению поля "name" связанной модели в поле "group_policies"
    FiltersOrgUnitID:
      name: orgunit
      in: query
      required: false
      schema:
        type: integer
        example: 1
      description: Фильтрация по точному значению поля "id" связанной модели в поле "orgunit"
    FiltersSchemaType:
      name: type
      in: query
      required: false
      schema:
        type: string
        enum:
          - USER
          - HOST
      description: Фильтрация по точному значению поля "type"
    OrderByQueryParam:
      name: ordering
      in: query
      required: false
      schema:
        type: string
        example: id
      description: 'Сортировка по значениям указанного поля, обратный порядок задается знаком "-" перед названием поля'
    SearchQueryParam:
      name: search
      in: query
      required: false
      schema:
        type: string
        example: Отдел
      description: Поиск по текстовым полям модели
